name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry config installer.max-workers 10
        # Install CPU-only PyTorch for faster CI
        pip install torch --index-url https://download.pytorch.org/whl/cpu --upgrade
        poetry install --no-interaction --no-root

    - name: Initialize database
      run: |
        cd backend
        poetry run yoyo apply --batch

    - name: Run backend unit tests
      env:
        HF_HUB_OFFLINE: "1"
        TRANSFORMERS_OFFLINE: "1"
        TORCH_HOME: /tmp/torch
      run: poetry run pytest backend/tests/ -v --cov=backend --cov-report=xml -m "not integration"

    - name: Run integration tests
      run: poetry run pytest tests/ -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: codecov-umbrella

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Run frontend build test
      run: |
        cd frontend
        npm run build

  lint-and-format:
    name: Linting and Formatting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-3.11-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry config installer.max-workers 10
        # Install CPU-only PyTorch for faster CI
        pip install torch --index-url https://download.pytorch.org/whl/cpu --upgrade
        poetry install --no-interaction --no-root

    - name: Run ruff linting
      run: poetry run ruff check backend/ tests/

    - name: Run black formatting check
      run: poetry run black --check backend/ tests/


  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry config installer.max-workers 10
        # Install CPU-only PyTorch for faster CI
        pip install torch --index-url https://download.pytorch.org/whl/cpu --upgrade
        poetry install --no-interaction --no-root

    - name: Initialize database
      run: |
        cd backend
        poetry run yoyo apply --batch

    - name: Start backend server
      env:
        HF_HUB_OFFLINE: "1"
        TRANSFORMERS_OFFLINE: "1"
        TORCH_HOME: /tmp/torch
      run: |
        cd backend
        poetry run uvicorn app.main:app --host 127.0.0.1 --port 8000 &
        sleep 10

    - name: Run API integration tests
      run: poetry run pytest tests/test_api.py -v

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Test API connectivity
      run: |
        # Test that API is responding
        curl -f http://127.0.0.1:8000/health || exit 1